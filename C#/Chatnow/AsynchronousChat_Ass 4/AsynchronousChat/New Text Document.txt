using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using System.Text;

namespace AsynchronousChat
{
    public partial class Network_Game : Form
    {
        Socket sck;
        IPEndPoint epLocal, epRemote;
        public string messagesent;
        public string messagereceived;

        public Network_Game()
        {
            InitializeComponent();
            
            sck = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            sck.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReuseAddress, true);
        }

        private string GetLocalIP()
        {
            //IPHostEntry host;
            //host = Dns.GetHostEntry(Dns.GetHostName());


            //foreach (IPAddress ip in host.AddressList)
            //{
            //    if (ip.AddressFamily == AddressFamily.InterNetwork)
            //    {
            //        return ip.ToString();
            //    }
            //}
            return "127.0.0.1";
        }

        private void MessageCallBack(IAsyncResult aResult)
        {
            try
            {                
                int size = sck.EndReceiveFrom(aResult, ref epRemote);
                if(size>0)
                {
                    byte[] receivedData = new byte[1024];
                    receivedData = (byte[])aResult.AsyncState;
                    ASCIIEncoding eEncoding = new ASCIIEncoding();
                    string receivedMessage = eEncoding.GetString(receivedData);

                    listBox.Items.Add(receivedMessage);
                }
                byte[] buffer = new byte[1024];
                sck.BeginReceiveFrom(buffer, 0, buffer.Length, SocketFlags.None, ref epRemote, new AsyncCallback(MessageCallBack), buffer);
            }
            catch (Exception exp)
            {
                MessageBox.Show(exp.ToString());
            }
        }


        public void contextMenuStrip1_Opening(object sender, CancelEventArgs e)
        {

        }

        public void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        public void connectToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //AsynchronousClient.StartClient();
            //listMessage.Text = AsynchronousClient.connectcondition;
            try
            {
                epLocal = new IPEndPoint(IPAddress.Parse("127.0.0.1"), Convert.ToInt32(textBox1.Text));
                sck.Bind(epLocal);

                epRemote = new IPEndPoint(IPAddress.Parse("127.0.0.1"), Convert.ToInt32(textBox2.Text));
                sck.Connect(epRemote);

                byte[] buffer = new byte[1024];
                sck.BeginReceiveFrom(buffer, 0, buffer.Length, SocketFlags.None, ref epRemote, new AsyncCallback(MessageCallBack), buffer);

                connectToolStripMenuItem.Enabled = false;
                btnSend.Enabled = true;
                textMessage.Focus();
            }
            catch(Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        public void disconnectToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //AsynchronousClient.client.Shutdown(SocketShutdown.Both);
            //AsynchronousClient.client.Close();
        }

        public void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        public void Your_Message_Enter(object sender, EventArgs e)
        {

        }

        public void MessageBox_TextChanged(object sender, EventArgs e)
        {
            
        }

        public void btnSend_Click(object sender, EventArgs e)
        {
            //messagesent = textMessage.Text;
            //messagereceived = listMessage.Text;
            //listMessage.ReadOnly = false;
            //listMessage.Text = messagereceived + Environment.NewLine + messagesent;
            //listMessage.ReadOnly = true;
            //textMessage.Text = "";
            //AsynchronousClient.Send(AsynchronousClient.client, messagesent);
            //messagesent = AsynchronousClient.Receive(AsynchronousClient.client);
            //messagereceived = listMessage.Text;
            //listMessage.ReadOnly = false;
            //listMessage.Text = messagereceived + Environment.NewLine + messagesent;
            //listMessage.ReadOnly = true;

            try
            {
                System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();
                byte[] msg = new byte[1024];
                msg = enc.GetBytes(textMessage.Text);

                sck.Send(msg);
                listBox.Items.Add(">>" + textMessage.Text);
                textMessage.Clear();
            }
            catch(Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        public void ConversationBox_TextChanged(object sender, EventArgs e)
        {
            
        }

        private void Receive_Click(object sender, EventArgs e)
        {
            //AsynchronousClient.Receive(AsynchronousClient.client);
        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {

        }

        private void listBox_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        public void connectServerToolStripMenuItem_Click(object sender, EventArgs e)
        {
            
        }
    }
}
