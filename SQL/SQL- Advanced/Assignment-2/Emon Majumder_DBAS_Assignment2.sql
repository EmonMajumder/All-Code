use Chinook;
go

/*1.	A new column called Paid should be added to the existing Invoice table.
It will be marked as True only when an invoice has been fully paid. When a new
invoice is created, the new field should always be set to False until full
payment has been received.*/
alter table Invoice
add Paid bit default 'false' not null;

/*2.	A new table called InvoicePayment will be added. */
create table InvoicePayment (
PaymentId int Identity primary key ,
InvoiceId int not null,
CustomerId int not null,
PaymentDate datetime,
Amount money not null                                                                                                                            ,
foreign key (InvoiceId) references Invoice(InvoiceId),
foreign key (CustomerId) references Customer(CustomerId));
go


/*b.	Proc 1: A procedure named uspAddNewInvoice, which will be used to add new invoice records to the Invoice table.
Note: For this assignment, an Invoice will only ever have a single InvoiceLine item associated with it. 
This proc will receive all values for the new Invoice and its line item and add them as new, related 
records to the Invoice and InvoiceLine tables. The Invoice Date should be auto-generated by the system, 
and the Invoice Total field should be calculated (Price * Quantity) instead of passed as a parameter.*/

create proc uspAddNewInvoice
@CustomerId int = null, @BillingAddress varchar(70) = null, @BillingCity varchar(40) =null,
@BillingState varchar(40)=null, @BillingCountry varchar(40)=null, @BillingPostalCode varchar(10)=null,
@TrackId int=null, @UnitPrice float =null, @Quantity int=null
as
begin
	begin tran
		begin try
			declare @InvoiceId int =null;
			insert into Invoice (CustomerId,InvoiceDate,BillingAddress,BillingCity,BillingState,BillingCountry,
			BillingPostalCode,Total)
			values(@CustomerId,getdate(),@BillingAddress,@BillingCity,@BillingState,@BillingCountry,
			@BillingPostalCode,@unitPrice*@Quantity);
			
			select @InvoiceId=max(InvoiceId) from Invoice;
				
			insert into InvoiceLine (InvoiceId,TrackId,UnitPrice,Quantity)
			values (@InvoiceId,@TrackId,@UnitPrice,@Quantity);
		end try
		begin catch
			print 'Error occurred. Data entry failed.'
			if @@TRANCOUNT>0
				rollback tran;
		end catch
		if @@TRANCOUNT>0
			commit tran;			
end;
go


/*c.	Proc 2: A procedure named uspAddInvoicePayment, which will be used to add a new record to the new InvoicePayment table. 
Moving forward, this proc will be used to process new payment entries. The Payment Date should be auto-generated by the system.*/

create proc uspAddInvoicePayment
@InvoiceIdAIP int = null, @AmountAIP money =null
as
begin
	begin tran
		begin try
			declare @CustomerIdAIP int = null;
			select @CustomerIdAIP=CustomerId from Invoice where InvoiceId=@InvoiceIdAIP;

			insert into InvoicePayment (InvoiceId, CustomerId, PaymentDate, Amount)
			values(@InvoiceIdAIP, @CustomerIdAIP, getdate(),@AmountAIP);
		end try
		begin catch
			print 'Error occurred. Data entry failed.'
			if @@TRANCOUNT>0
				rollback tran;
		end catch
		if @@TRANCOUNT>0
			commit tran;			
end;
go


/*d.	Proc 3: A procedure called uspRunInvoices. The intent of this procedure is to be a one-time proc that will 
create invoice payment records for all existing records. (Moving forward, Invoices and Payments will use the 
other new stored procs.) This procedure will assume all existing Invoice have been paid in full. It will go 
through every existing Invoice record and use data from the existing Invoice records to create new InvoicePayment 
records. After gathering the appropriate data for an Invoice record, this procedure will call the 
uspAddInvoicePayment procedure to add the new Payment records.*/

create proc uspRunInvoices
as
begin
	begin tran
		declare @Counter int =1;
		declare @Total float =0;
		declare @InvoiceIdRI int = null;
		declare @CustomerIdRI int = null;
		declare @AmountRI money =null
		begin try
			select @InvoiceIdRI=max(InvoiceId) from Invoice;
			while (@Counter<=@InvoiceIdRI)
				begin
					select @AmountRI=Total from Invoice where InvoiceId=@Counter;
					exec uspAddInvoicePayment @InvoiceIdAIP=@Counter,@AmountAIP=@AmountRI;
					set @Counter=@Counter+1;
				end;
		end try
		begin catch
			print 'Error occurred. Data entry failed.'
			if @@TRANCOUNT>0
				rollback tran;
		end catch
		if @@TRANCOUNT>0
			commit tran;			
end;
go
in


/*e.	Proc 4: A procedure called uspCheckPaidInvoices, which will iterate through every Invoice record 
and compare it to its associated Payment record. If the amount in both records is the same, the procedure 
will update the Paid field in the Invoice table to True.*/

create proc uspCheckPaidInvoices
as
begin
	begin tran
		declare @Counter int =1;
		declare @Total float =0;
		declare @InvoiceIdCPI int = null;
		declare @PaymentIdCPI int =null;
		declare @TotalPaid money=null;
		begin try
			select @InvoiceIdCPI=max(InvoiceId) from Invoice;
			while (@Counter<=@InvoiceIdCPI)
				begin
					select @TotalPaid=sum(all Amount) from InvoicePayment
					where InvoiceId=@Counter
					group by InvoiceId ;

					select @Total=Total from Invoice where InvoiceId=@Counter;
					if (@TotalPaid=@Total)
						begin
							update Invoice
							set Paid ='true' where InvoiceId=@Counter;
						end
					set @Counter=@Counter+1;					
				end
		end try
		begin catch
			print 'Error occurred. Data entry failed.'
			if @@TRANCOUNT>0
				rollback tran;
		end catch
		if @@TRANCOUNT>0
			commit tran;			
end;
go

/*	A statement to add a new Invoice/InvoiceLine record (only one InvoiceLine record is required), 
using your uspAddNewInvoice procedure.*/
exec uspAddNewInvoice @CustomerId = 56, @BillingAddress= '294 Osborne Street',
@BillingCity='Halifax', @BillingState='NS', @BillingCountry='Canada',
@BillingPostalCode='B3N 3H1', @TrackId=8, @UnitPrice=3.56, @Quantity=3;

/*	A statement to add a new invoice payment for the new Invoice added in Test 1, using your uspAddInvoicePayment procedure.*/
exec uspAddInvoicePayment @InvoiceIdAIP=413,@AmountAIP=10.68;

/*	A statement to revert ALL Invoice records to unpaid status.*/
update Invoice set Paid='false' where InvoiceId>0;


/*	A statement to remove all existing records from the InvoicePayment table.*/
TRUNCATE TABLE InvoicePayment;

/*  A statement to re-create all InvoicePayment records, using your uspRunInvoices procedure.*/
exec uspRunInvoices;

/*	A statement to re-set all applicable Invoices to Paid or not, using your uspCheckPaidInvoices procedure.*/
exec uspCheckPaidInvoices;